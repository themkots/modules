##############################################################################
#   Modules Release Tcl
#   Providing a flexible user environment
#
#   File:		modules.61-coll/%M%
#   Revision:		%I%
#   First Edition:	2016/08/02
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:
#   Modulefiles:
#   Sub-Command:
#
#   Comment:	%C{
#			Test the module 'restore' command
#		}C%
#
##############################################################################

set cbadnerrmsg "$error_msgs: Collection $collbadn cannot be found"
set cbadfperrmsg "$error_msgs: Collection $collbadfp cannot be found"
set cbadterrmsg "$error_msgs: Collection $colld (for target \"$colltarget\") cannot be found"
set cderrmsg "Loading loc_rc1/1.0\nLoading load/15\nLoading verssort/1.10\nload $cdmod4\nLoading $cdmod4\nLoading loc_dv2/1.0"
set c1errmsg "Unloading loc_dv2/1.0\nload $c1mod5\nLoading $c1mod5\nload $c1mod6\nLoading $c1mod6"
set c2errmsg "unload $c1mod6\nUnloading $c1mod6\nunload $c1mod5\nUnloading $c1mod5\nunload $cdmod4\nUnloading $cdmod4\nload $c2mod4\nLoading $c2mod4\nload $c2mod5\nLoading $c2mod5\nload $c2mod6\nLoading $c2mod6"
set c1errmsgf2 "unload $c2mod6\nUnloading $c2mod6\nunload $c2mod5\nUnloading $c2mod5\nunload $c2mod4\nUnloading $c2mod4\nload $cdmod4\nLoading $cdmod4\nload $c1mod5\nLoading $c1mod5\nload $c1mod6\nLoading $c1mod6"
set c3errmsg ""
set c4errmsg "unload $c2mod6\nUnloading $c2mod6\nunload $c2mod5\nUnloading $c2mod5\nunload $c2mod4\nUnloading $c2mod4\nUnloading verssort/1.10\nUnloading load/15\nUnloading loc_rc1/1.0"
set c5errmsg $c4errmsg
set badcontfp "$homewithcoll/.Xresources"
set badcontfperrmsg "$error_msgs: $badcontfp is not a valid collection"
set c7errmsg "Loading $modpathre.path3/dcross/dir1/3.0\nLoading $modpathre.path2/cross/6.0\nLoading $modpathre.path1/novercross"
set c8errmsg $c7errmsg
set c9errmsg "load $c9mod1\nLoading $c9mod1\nload $c9mod2\nLoading $c9mod2\nload $c9mod3\nLoading $c9mod3"
set c10errmsg $c9errmsg
set c9errmsg2 "unload $c9mod3\nUnloading $c9mod3\nunload $c9mod2\nUnloading $c9mod2\nload $c9mod2\nLoading $c9mod2\nload $c9mod3\nLoading $c9mod3"
set c11errmsg "load $c11mod1\nLoading $c11mod1\nload $c11mod2\nLoading $c11mod2"
set c12errmsg "unload $c9mod3\nUnloading $c9mod3\nunload $c9mod2\nUnloading $c9mod2\nunload $c9mod1\nUnloading $c9mod1\nload f4\nLoading f4\nload f5\nLoading f5\n\n[msg_load f6 [err_conlo f5]]\n\n[msg_load f7 [err_reqmis f6]]"
set c13errmsg $cderrmsg
set c14errmsg "unload m2\nUnloading m2\nload m3\nLoading m3"
set c15errmsg "Loading $c15mod1\nLoading $c15mod2\nLoading $c15mod3"
set c16errmsg "Loading $c16mod1\nLoading $c16mod2\nLoading $c16mod3\nLoading $c16mod4\nLoading $c16mod5"

# set HOME to location containing collections
if { $verbose > 0 } {
    send_user "\tSetup HOME = $homewithcoll\n"
}
set env(HOME) "$homewithcoll"


#
# test restoring nonexistent collection
#

testouterr_cmd "ALL" "restore $collbadn" "ERR" "$cbadnerrmsg"


#
# test restoring nonexistent collection specified as a filepath
#

testouterr_cmd "ALL" "restore $collbadfp" "ERR" "$cbadfperrmsg"


#
# test showing existent file which is not a collection
#

testouterr_cmd "ALL" "restore $badcontfp" "ERR" "$badcontfperrmsg"


#
# test restoring default collection
#

# setup an empty environment
unsetenv_path_var MODULEPATH

lappend ans [list set LOADEDMODULES $cdlm]
lappend ans [list set _LMFILES_ $cdlmf]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME $cdlmalt]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME_modshare "(.*)"]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list set MODULEPATH $cdmodpath]
lappend ans [list set LOADEDMODULES_modshare "(.*)"]
lappend ans [list set _LMFILES__modshare "(.*)"]
lappend ans [list set MODULEPATH_modshare "(.*)"]

testouterr_cmd_re "ALL" "restore" $ans "$cderrmsg"


#
# test restoring default collection saved with version pinned and with parts
# of this environment already loaded (default version comparison)
#

eval setenv_path_var MODULEPATH [split $cdmodpath ":"]
setenv_loaded_module [split $cdlm_part ":"] [split $cdlmf_part ":"]
eval setenv_path_var MODULES_LMALTNAME [split $cdlmalt_part ":"]

set ans [list]
lappend ans [list setpath MODULES_LMALTNAME $cdlmalt]
lappend ans [list setpath LOADEDMODULES $cdlm]
lappend ans [list setpath _LMFILES_ $cdlmf]

testouterr_cmd_re "sh" "restore" $ans "Unloading loc_dv2/2.0\nLoading loc_dv2/1.0"


#
# test restoring collection that only adds path to use and mods to load
#

# fake environment state: default collection restored
setenv_loaded_module [split $cdlm ":"] [split $cdlmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $cdlmalt ":"]

set ans [list]
lappend ans [list setpath MODULES_LMALTNAME $c1lmalt]
lappend ans [list setpath MODULEPATH $c1modpath]
lappend ans [list setpath LOADEDMODULES $c1lm $c1lmnodefault]
lappend ans [list setpath _LMFILES_ $c1lmf $c1lmfnodefault]

testouterr_cmd_re "ALL" "restore $coll1" $ans "$c1errmsg"


#
# test restoring exact same collection, nothing should happen
#

# fake environment state: $coll1 collection restored
eval setenv_path_var MODULEPATH [split $c1modpath ":"]
setenv_loaded_module [split $c1lm ":"] [split $c1lmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $c1lmalt ":"]

testouterr_cmd "ALL" "restore $coll1" "OK" ""


#
# test restoring collection unload some modules
# to reload them in correct order
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c2lm]
lappend ans [list setpath _LMFILES_ $c2lmf]

testouterr_cmd_re "ALL" "restore $coll2" $ans "$c2errmsg"


#
# test restoring collection that reorder used paths
# no change on loaded modules
#

# fake environment state: $coll2 collection restored
eval setenv_path_var MODULEPATH [split $c2modpath ":"]
setenv_loaded_module [split $c2lm ":"] [split $c2lmf ":"]
eval setenv_path_var MODULES_LMALTNAME [split $c2lmalt ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c3modpath]

testouterr_cmd_re "ALL" "restore $coll3" $ans "$c3errmsg"


#
# test restoring collection specified as filepath
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c1lm]
lappend ans [list setpath _LMFILES_ $c1lmf]

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection specified as filepath when
# MODULES_COLLECTION_TARGET is set. target should be ignored
#

# setup environment state
if { $verbose > 0 } {
    send_user "\tSetup MODULES_COLLECTION_TARGET = $colltarget\n"
}
set env(MODULES_COLLECTION_TARGET) "$colltarget"

testouterr_cmd_re "ALL" "restore $coll1fp" $ans "$c1errmsgf2"


#
# test restoring collection not mentionning module to load
# when MODULES_COLLECTION_TARGET set
#

set ans [list]
lappend ans [list unset _LMFILES__modshare]
lappend ans [list unset LOADEDMODULES_modshare]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans "(.*)"

testouterr_cmd_re "ALL" "restore $coll4" $ans "$c4errmsg"


#
# test restoring same collection than before but with a modulepath
# prepended rather appended
#

testouterr_cmd_re "ALL" "restore $coll5fp" $ans "$c5errmsg"


#
# test restoring collection mixing virtual and deep modules spread through
# different modulepaths to check correct default version is restored
#

# restore environment
unsetenv_path_var MODULEPATH
unsetenv_loaded_module
unsetenv_path_var MODULES_LMALTNAME

if {$install_implicitdefault eq {y}} {
    set ans [list]
    lappend ans [list set testsuite "yes"]
    lappend ans [list setpath LOADEDMODULES $c6lm]
    lappend ans [list setpath _LMFILES_ $c6lmf]
    lappend ans [list setpath MODULEPATH $c6modpath]
    lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]
    set c6errmsg "Loading dvcross/dir1/1.0\nLoading dcross/dir1/3.0\nLoading cross/6.0\nLoading novercross"
} else {
    set ans [list]
    lappend ans [list set testsuite "yes"]
    lappend ans [list setpath LOADEDMODULES $c6lmnodefault]
    lappend ans [list setpath _LMFILES_ $c6lmfnodefault]
    lappend ans [list setpath MODULEPATH $c6modpath]
    lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]
    lappend ans [list ERR]
    set c6errmsg "$err_nodefault'dvcross'\nLoading dcross/dir1/3.0\nLoading cross/6.0\nLoading novercross"
}
testouterr_cmd_re "sh" "restore $coll6" $ans $c6errmsg


#
# test restoring collection with empty element set in MODULEPATH, LOADEDMODULES
#

# restore environment
setenv_path_var MODULEPATH {} {}
setenv_loaded_module [list {} {}] [list {} {}]

if {$install_implicitdefault eq {y}} {
    set ans [list]
    lappend ans [list set testsuite "yes"]
    lappend ans [list setpath LOADEDMODULES "::$c6lm"]
    lappend ans [list setpath _LMFILES_ "::$c6lmf"]
    # empty dir elements are ignored but stick to the variable, they should be removed
    lappend ans [list setpath MODULEPATH "::$c6modpath"]
    lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]
    set c6errmsg "Loading dvcross/dir1/1.0\nLoading dcross/dir1/3.0\nLoading cross/6.0\nLoading novercross"
} else {
    set ans [list]
    lappend ans [list set testsuite "yes"]
    lappend ans [list setpath LOADEDMODULES "::$c6lmnodefault"]
    lappend ans [list setpath _LMFILES_ "::$c6lmfnodefault"]
    # empty dir elements are ignored but stick to the variable, they should be removed
    lappend ans [list setpath MODULEPATH "::$c6modpath"]
    lappend ans [list setpath MODULES_LMALTNAME $c6lmalt]
    lappend ans [list ERR]
    set c6errmsg "$err_nodefault'dvcross'\nLoading dcross/dir1/3.0\nLoading cross/6.0\nLoading novercross"
}
testouterr_cmd_re "sh" "restore $coll6" $ans $c6errmsg


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
#

# setup environment state
unsetenv_path_var MODULEPATH
unsetenv_loaded_module

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]

testouterr_cmd_re "sh" "restore $coll7fp" $ans $c7errmsg


#
# test restoring collection with no modulepath and modulefiles loaded as fullpath
# starting with a defined MODULEPATH
#

setenv_path_var MODULEPATH $modpath

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c7lm]
lappend ans [list setpath _LMFILES_ $c7lmf]
lappend ans [list unsetpath MODULEPATH]

testouterr_cmd_re "sh" "restore $coll7fp" $ans $c7errmsg


#
# test restoring collection with a modulepath and modulefiles loaded as fullpath
#

unsetenv_path_var MODULEPATH

set ans [list]
lappend ans [list set testsuite "yes"]
lappend ans [list setpath LOADEDMODULES $c8lm]
lappend ans [list setpath _LMFILES_ $c8lmf]
lappend ans [list setpath MODULEPATH $c8modpath]

testouterr_cmd_re "sh" "restore $coll8fp" $ans $c8errmsg


#
# test restoring collection with some modulefiles loaded not asked by user
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULEPATH $c9modpath]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll9fp" $ans $c9errmsg


#
# test restoring collection with some modulefiles loaded not asked by user
#

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULEPATH $c9modpath]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll10fp" $ans $c10errmsg


#
# test restoring collection with some modulefiles loaded not asked by user
# from a situation where all modulefiles where loaded asked by user
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"]

set ans [list]
lappend ans [list setpath LOADEDMODULES $c9lm]
lappend ans [list setpath _LMFILES_ $c9lmf]
lappend ans [list setpath MODULES_LMNOTUASKED $c9lmnua]

testouterr_cmd_re "sh" "restore $coll9fp" $ans $c9errmsg2


#
# test restoring collection with some modulefiles loaded not asked by user
# from a situation where not user asked information is already correct
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"] [split $c9lmnua ":"]

testouterr_cmd_re "sh" "restore $coll9fp" "" ""


#
# test restoring collection in which a modulefile has 'module load' dependency
# to another modulefile
#

setenv_path_var MODULEPATH [split $c11modpath :]
unsetenv_loaded_module

set ans [list]
lappend ans [list setpath LOADEDMODULES $c11lm]
lappend ans [list setpath _LMFILES_ $c11lmf]
lappend ans [list setpath MODULES_LMNOTUASKED $c11lmnua]
lappend ans [list setpath MODULES_LMPREREQ $c11mod2&$c11mod1]
testouterr_cmd_re sh "restore $coll11fp" $ans $c11errmsg


#
# test restoring collection with incompatible modulefiles saved in it (which
# should not be possible)
#

eval setenv_path_var MODULEPATH [split $c9modpath ":"]
setenv_loaded_module [split $c9lm ":"] [split $c9lmf ":"]

set ans [list]
lappend ans [list setpath MODULEPATH $c12modpath]
lappend ans [list setpath LOADEDMODULES $c12lm]
lappend ans [list setpath _LMFILES_ $c12lmf]
lappend ans [list ERR]
testouterr_cmd_re sh "restore $coll12fp" $ans $c12errmsg


#
# test restoring nonexistent default collection when
# MODULES_COLLECTION_TARGET is set
#

testouterr_cmd "ALL" "restore" "ERR" "$cbadterrmsg"


#
# test unsetting HOME
#

if { $verbose > 0 } {
    send_user "\tUnset HOME \n"
}
unset env(HOME)

testouterr_cmd "sh" "restore" "ERR" $nohomeerrmsg

# restore default testsuite home
if { $verbose > 0 } {
    send_user "\tRestore HOME = $ORIG_HOME\n"
}
set env(HOME) $ORIG_HOME


#
# test when loaded environment is inconsistent
#

setenv_loaded_module [list foo bar] "/path/to/foo"

testouterr_cmd "sh" "restore $coll8fp" "ERR" "$err_loinconsist\n  LOADEDMODULES=foo bar\n  _LMFILES_=/path/to/foo"


#
# test use of restore command from a modulefile to check
# unload and load messages produced by this command in this context
#

# set HOME to location containing collections
setenv_var HOME $hometestcoll

setenv_loaded_module [split $cdlm ":"] [split $cdlmf ":"]
unsetenv_var MODULES_COLLECTION_TARGET

set ans [list]
lappend ans [list setpath MODULEPATH $modpath:$modpath.2]
lappend ans [list setpath LOADEDMODULES $c2lm:$modpath.2/restore]
lappend ans [list setpath _LMFILES_ $c2lmf:$modpath.2/restore]

testouterr_cmd_re sh "load $modpath.2/restore" $ans "Unloading loc_dv2/1.0\nunload coll/a\nUnloading coll/a\nload coll/c\nLoading coll/c\nload coll/a\nLoading coll/a\nload coll/b\nLoading coll/b"


#
# restore with implicit_default disabled a collection containing an explicit default
# expressed with pin_version disabled
#

if {![is_config_locked implicit_default] || $install_implicitdefault ne {y}} {
setenv_var MODULES_IMPLICIT_DEFAULT 0
unsetenv_var MODULEPATH
unsetenv_loaded_module

set ans [list]
lappend ans [list set LOADEDMODULES $c13lm]
lappend ans [list set _LMFILES_ $c13lmf]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME $c13lmalt]
lappend ans "(.*)"
lappend ans [list set MODULES_LMALTNAME_modshare "(.*)"]
lappend ans "(.*)"
lappend ans "(.*)"
lappend ans [list set MODULEPATH $c13modpath]
lappend ans [list set LOADEDMODULES_modshare "(.*)"]
lappend ans [list set _LMFILES__modshare "(.*)"]
lappend ans [list set MODULEPATH_modshare "(.*)"]

testouterr_cmd_re sh "restore $coll13fp" $ans $c13errmsg

unsetenv_var MODULES_IMPLICIT_DEFAULT
}

#
# a module is loaded as well as its requirement declared with 'module load'
# and which was automatically loaded when main module was loaded. collection
# is then restored, main module is not part of collection but its requirement is
#

setenv_path_var MODULEPATH $modpath.deps
setenv_loaded_module [list m1 m2] [list $modpath.deps/m1 $modpath.deps/m2] [list m1]
setenv_path_var MODULES_LMPREREQ m2&m1

set ans [list]
lappend ans [list setpath LOADEDMODULES m1:m3]
lappend ans [list setpath _LMFILES_ $modpath.deps/m1:$modpath.deps/m3]
lappend ans [list setpath MODULES_LMPREREQ m3&m1]

# whether auto_handling is enabled or disabled should not impact result
setenv_var MODULES_AUTO_HANDLING 0
testouterr_cmd_re sh "restore $coll14fp" $ans $c14errmsg
setenv_var MODULES_AUTO_HANDLING 1
testouterr_cmd_re sh "restore $coll14fp" $ans $c14errmsg
unsetenv_var MODULES_AUTO_HANDLING


#
# restore collection where modulepath and module names contain space character
#

if {!$is_symlink_supported} {
    send_user "\tskipping tests over '$modpath wspace' modulepath as symbolic links are not supported on filesystem\n"
} else {

unsetenv_path_var MODULEPATH
unsetenv_loaded_module
unsetenv_path_var MODULES_LMPREREQ

set ans [list]
lappend ans [list setpath MODULEPATH $c15modpath]
lappend ans [list setpath LOADEDMODULES $c15lm]
lappend ans [list setpath _LMFILES_ $c15lmf]
lappend ans [list setpath MODULES_LMALTNAME $c15lmalt]
testouterr_cmd_re sh "restore $coll15fp" $ans $c15errmsg

set ans [list]
lappend ans [list setpath MODULEPATH $c16modpath]
lappend ans [list setpath LOADEDMODULES $c16lm]
lappend ans [list setpath _LMFILES_ $c16lmf]
lappend ans [list setpath MODULES_LMALTNAME $c16lmalt]
testouterr_cmd_re sh "restore $coll16fp" $ans $c16errmsg

}

#
# Cleanup
#

reset_test_env
